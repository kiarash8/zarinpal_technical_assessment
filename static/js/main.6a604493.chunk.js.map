{"version":3,"sources":["storage/data-model/index.ts","storage/data-model/models/general.model.ts","storage/data-model/models/task.model.ts","storage/index.tsx","components/tasks/shared.ts","shared/utilities.ts","components/tasks/task-dialog.tsx","components/tasks/task-list-item.tsx","components/tasks/complete-task-list-dialog.tsx","components/tasks/task-list.tsx","App.tsx","index.tsx"],"names":["modelNameKeys","Models","storage","modelInitial","taskDialog","show","completeTaskListDialog","items","Context","createContext","initialState","state","forEach","model","modelConfig","storageData","window","localStorage","getItem","undefined","JSON","parse","getModelData","Reducer","action","type","toString","split","method","modelBody","Object","keys","field","payload","setItem","stringify","getNewState","PriorityColors","Storage","Provider","children","useReducer","dispatch","value","Action","priorityList","color","Utilities","validation","fields","map","x","filter","required","includes","fieldsValidation","checkedField","el","val","length","assign","uuidv4","replace","c","r","Math","random","TaskDialog","useContext","useState","selectedPriority","setSelectedPriority","title","description","indicators","setFields","useEffect","general","mood","getData","clearForm","tasks","task","index","findIndex","id","item","priority","handleClose","setTimeout","handleChange","event","target","checked","add","complete","edit","Dialog","fullWidth","open","onClose","DialogTitle","Box","sx","display","justifyContent","Chip","marginRight","label","size","IconButton","onClick","splice","DialogContent","TextField","autoFocus","onChange","e","error","variant","margin","multiline","rows","marginTop","Typography","ButtonGroup","Button","disableElevation","gutterBottom","DialogActions","TaskListItem","disableAction","openTask","listItemContent","ListItemText","primary","stopPropagation","markAsComplete","secondary","ListItem","disablePadding","ListItemButton","divider","Divider","component","CompleteTaskListDialog","List","width","bgcolor","TaskList","isEmpty","hasRemainingTask","hasCompleteTask","createNewTask","position","maxWidth","height","Toolbar","flexGrow","textAlign","disabled","paddingX","overflowX","Alert","icon","severity","Fab","bottom","right","aria-label","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAkBaA,EAAkC,CAC7C,UACA,QAWWC,EAAsB,CACjC,QAAW,CACTC,SAAS,EACTC,aCnB8C,CAChDC,WAAY,CACVC,MAAM,GAERC,wBAAwB,IDiBxB,KAAQ,CACNJ,SAAS,EACTC,aEnB0C,CAC1CI,MAAO,M,OChBLC,EAAUC,wBAAwB,IAElCC,EAAe,WACnB,IAAMC,EAAa,GAKnB,OAJAX,EAAcY,SAAQ,SAAAC,GACpBF,EAAME,GAMV,SAAsBA,GACpB,IAAMC,EAAcb,EAAOY,GAC3B,IAAIC,EAAYZ,QACd,OAAOY,EAAYX,aAErB,IAAMY,EAAgC,qBAAXC,OAAyBC,aAAaC,QAAQL,GAAS,KAClF,OAAwB,OAAhBE,QAAyCI,IAAjBJ,EAA8BK,KAAKC,MAAMN,GAAeD,EAAYX,aAZnFmB,CAAaT,MAGvBF,GAYT,SAASY,EAAQZ,EAAYa,GAAc,IAAD,EAChBA,EAAOC,KAAKC,WAAWC,MAAM,KADb,mBACjCC,EADiC,KACzBf,EADyB,KAExC,MAAmB,QAAXe,GAA+B,UAAXA,EAG9B,SAAqBA,EAAgBf,EAAkBW,EAAab,GAClE,IAAMG,EAAcb,EAAOY,GACrBgB,EAA6B,UAAXD,EAAsBd,EAAYX,aAAe,GAC3D,QAAXyB,GACCE,OAAOC,KAAKjB,EAAYX,cAAcS,SAAQ,SAAAoB,GAC1CH,EAAUG,QAAoCb,IAA1BK,EAAOS,QAAQD,GAAuBrB,EAAME,GAAOmB,GAASR,EAAOS,QAAQD,MAIpGlB,EAAYZ,SAAWe,aAAaiB,QAAQrB,EAAOO,KAAKe,UAAUN,IAErE,OAAO,2BACAlB,GADP,kBAEKE,EAAQgB,IAhBqCO,CAAYR,EAAQf,EAAOW,EAAQb,GAASA,EA+CzF,ICtDK0B,EDsDCC,EAAU,CAAEC,SA3BR,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAoB,EACZC,qBAAWlB,EAASb,KADR,mBAC/BC,EAD+B,KACxB+B,EADwB,KAGtC,OACE,cAAClC,EAAQ+B,SAAT,CAAkBI,MAAO,CAAEhC,QAAO+B,YAAlC,SAA+CF,KAuBhBhC,UAASoC,OAZ5C,SACEhB,EACAc,EACA7B,EACAoB,GAEA,OAAOS,EAAS,CACZjB,KAAK,GAAD,OAAKG,EAAL,YAAef,GACnBoB,QAAoB,QAAXL,EAAmBK,EAAUhC,EAAOY,GAAOV,iB,8JCpE7C0C,EAGP,CACJ,CACEF,MAAO,MACPG,MAAO,WAET,CACEH,MAAO,SACPG,MAAO,WAET,CACEH,MAAO,OACPG,MAAO,W,SAICT,K,cAAAA,E,iBAAAA,E,cAAAA,M,KCYL,IAAMU,EAAY,CACrBC,WA9BJ,SAAoBC,GAChB,OAAOnB,OAAOC,KAAKkB,GAAQC,KAAI,SAAAC,GAAC,OAAGF,EAAOE,MAAIC,QAAO,SAAAD,GAAC,OAAkB,IAAfA,EAAEE,YAAmBH,KAAI,SAAAC,GAAC,MAAe,KAAZA,EAAER,SAAcW,UAAS,IA8B/GC,iBA3BJ,SAA0BN,GACtB,IAAIO,EAA4B,GAchC,OAbA1B,OAAOC,KAAKkB,GAAQrC,SAAQ,SAAA6C,GACxB,IAAMC,EAAG,2BACFT,EAAOQ,IADL,IAELd,MAAOM,EAAOQ,GAAId,MAClBK,aACKC,EAAOQ,GAAId,QACiB,kBAAtBM,EAAOQ,GAAId,MAAkD,IAA5BM,EAAOQ,GAAId,MAAMgB,OAAoC,KAArBV,EAAOQ,GAAId,UAEvD,IAAxBM,EAAOQ,GAAIJ,SACnBA,SAAUJ,EAAOQ,GAAIJ,WAEzBvB,OAAO8B,OAAOJ,EAAd1B,OAAA,IAAAA,CAAA,GAA8B2B,EAAKC,OAEhCF,GAaPK,OAVJ,WACI,MAAO,uCAAuCC,QAAQ,SAAS,SAASC,GACpE,IAAIC,EAAoB,GAAhBC,KAAKC,SAAgB,EAC7B,OAD0C,MAANH,EAAYC,EAAKA,GAAK,IACjDtC,SAAS,SCLbyC,EAAiB,WAAO,IAAD,EACNC,qBAAW9B,EAAQ9B,SAAvCG,EAD0B,EAC1BA,MAAO+B,EADmB,EACnBA,SADmB,EAEc2B,mBAAqB,OAFnC,mBAE3BC,EAF2B,KAETC,EAFS,OAGNF,mBAAiB,CAC3CG,MAAO,CACL/C,KAAM,OACNkB,MAAO,GACPK,YAAY,EACZK,UAAU,GAEZoB,YAAa,CACXhD,KAAM,OACNkB,MAAO,GACPK,YAAY,EACZK,UAAU,GAEZqB,WAAY,CACVjD,KAAM,OACNkB,MAAO,GACPK,YAAY,EACZK,UAAU,KApBoB,mBAG3BJ,EAH2B,KAGnB0B,EAHmB,KAmClCC,qBAAU,WACLjE,EAAMkE,QAAQzE,WAAWC,KACW,QAAlCM,EAAMkE,QAAQzE,WAAW0E,MAAkBC,IAG9CC,MAGD,CAACrE,EAAMkE,QAAQzE,WAAWC,OAG7B,IAAM0E,EAAU,WACd,IAAME,EAAQtE,EAAMuE,KAAK3E,MACnB4E,EAAQF,EAAMG,WAAU,SAAAjC,GAAC,OAAGA,EAAEkC,KAAO1E,EAAMkE,QAAQzE,WAAWiF,MACpE,GAAGF,GAAS,EAAE,CACV,IAAMG,EAAOL,EAAME,GACnBR,EAAU,2BACH1B,GADE,IAELuB,MAAM,2BACCvB,EAAOuB,OADT,IAED7B,MAAO2C,EAAKd,QAEhBC,YAAY,2BACLxB,EAAOwB,aADH,IAEP9B,MAAO2C,EAAKb,cAEhBC,WAAW,2BACJzB,EAAOyB,YADJ,IAEN/B,MAAO2C,EAAKZ,gBAGpBH,EAAoBe,EAAKC,eAGzBC,KAIAR,EAAY,WAChBS,YAAW,WACTd,EAAU,CACRH,MAAM,2BACDvB,EAAOuB,OADP,IAEH7B,MAAO,GACPK,YAAY,IAEdyB,YAAY,2BACPxB,EAAOwB,aADD,IAET9B,MAAO,GACPK,YAAY,IAEd0B,WAAW,2BACNzB,EAAOyB,YADF,IAER/B,MAAO,GACPK,YAAY,MAGhBuB,EAAoB,SACnB,MAGCiB,EAAc,WAClBlD,EAAQM,OAAO,MAAOF,EAAU,UAAW,CACzCtC,WAAW,2BACNO,EAAMkE,QAAQzE,YADT,IAERC,MAAM,OAKNqF,EAAe,SAACC,EAA+B3D,GACnD,IAAMW,EAA+B,SAAvBM,EAAOjB,GAAOP,KAAkBkE,EAAMC,OAAOjD,MAAQgD,EAAMC,OAAOC,QAChFlB,EAAU,2BACL1B,GADI,kBAENjB,EAFM,YAAC,eAGHiB,EAAOjB,IAHL,IAILW,MAAOA,EACPK,YAAY,QAcZ8C,EAAM,WACVxD,EAAQM,OAAO,MAAOF,EAAU,OAAQ,CACtCnC,MAAM,GAAD,mBACAI,EAAMuE,KAAK3E,OADX,CAEH,CACE8E,GAAItC,EAAUc,SACdW,MAAOvB,EAAOuB,MAAM7B,MACpB8B,YAAaxB,EAAOwB,YAAY9B,MAChC+B,WAAYzB,EAAOyB,WAAW/B,MAC9B4C,SAAUjB,EACVyB,UAAU,OAIhBP,KAGIQ,EAAO,WACX,IAAMf,EAAQtE,EAAMuE,KAAK3E,MACnB4E,EAAQF,EAAMG,WAAU,SAAAjC,GAAC,OAAGA,EAAEkC,KAAO1E,EAAMkE,QAAQzE,WAAWiF,MACpEJ,EAAME,GAAN,2BACOF,EAAME,IADb,IAEIX,MAAOvB,EAAOuB,MAAM7B,MACpB8B,YAAaxB,EAAOwB,YAAY9B,MAChC+B,WAAYzB,EAAOyB,WAAW/B,MAC9B4C,SAAUjB,IAGdhC,EAAQM,OAAO,MAAOF,EAAU,OAAQ,CAAEnC,MAAO0E,IACjDO,KAwBF,OACE,eAACS,EAAA,EAAD,CACEC,WAAW,EACXC,KAAMxF,EAAMkE,QAAQzE,WAAWC,KAC/B+F,QAASZ,EAHX,UAIE,cAACa,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,QAAS,OAAQC,eAAgB,iBAA5C,UAjKQ,WACZ,OAAQ9F,EAAMkE,QAAQzE,WAAW0E,MAC/B,IAAK,MACH,MAAO,kBACT,IAAK,OACH,MAAO,YACT,IAAK,OACH,OAAO7B,EAAOuB,MAAM7B,OA2JjB6B,GACkC,SAAlC7D,EAAMkE,QAAQzE,WAAW0E,MACxB,gCACE,cAAC4B,EAAA,EAAD,CACEH,GAAI,CAAEI,YAAa,GACnBC,MAAOtC,EACPxB,MAAOT,EAAeiC,GACtBuC,KAAK,UAEP,cAACC,EAAA,EAAD,CACED,KAAK,QACL/D,MAAM,UACNiE,QA/BS,WACrB,IAAM9B,EAAQtE,EAAMuE,KAAK3E,MACnB4E,EAAQF,EAAMG,WAAU,SAAAjC,GAAC,OAAGA,EAAEkC,KAAO1E,EAAMkE,QAAQzE,WAAWiF,MACpEJ,EAAME,GAAN,2BACOF,EAAME,IADb,IAEIY,UAAU,IAGdzD,EAAQM,OAAO,MAAOF,EAAU,OAAQ,CAAEnC,MAAO0E,IACjDO,KAmBU,SAIC,cAAC,IAAD,MACD,cAACsB,EAAA,EAAD,CACED,KAAK,QACL/D,MAAM,UACNiE,QAAS,WACPzE,EAAQM,OAAO,MAAOF,EAAU,UAAW,CACzCtC,WAAW,2BACNO,EAAMkE,QAAQzE,YADT,IAER0E,KAAM,YAPd,SAWC,cAAC,IAAD,MACD,cAACgC,EAAA,EAAD,CACEhE,MAAM,QACN+D,KAAK,QACLE,QAzDC,WACb,IAAM9B,EAAQtE,EAAMuE,KAAK3E,MACnB4E,EAAQF,EAAMG,WAAU,SAAAjC,GAAC,OAAGA,EAAEkC,KAAO1E,EAAMkE,QAAQzE,WAAWiF,MACpEJ,EAAM+B,OAAO7B,EAAO,GAEpB7C,EAAQM,OAAO,MAAOF,EAAU,OAAQ,CAAEnC,MAAO0E,IACjDO,KAgDU,SAIC,cAAC,IAAD,cAKT,cAACyB,EAAA,EAAD,UACqC,SAAlCtG,EAAMkE,QAAQzE,WAAW0E,KAC1B,qCACE,cAACoC,EAAA,EAAD,CACEC,WAAS,EACT1F,KAAK,OACLkB,MAAOM,EAAOuB,MAAM7B,MACpByE,SAAU,SAAAC,GAAC,OAAI3B,EAAa2B,EAAG,UAC/BC,MAAOrE,EAAOuB,MAAMxB,WACpB4D,MAAM,QACNW,QAAQ,WACRC,OAAO,QACPX,KAAK,QACLX,WAAS,IAEX,cAACgB,EAAA,EAAD,CACEzF,KAAK,OACLkB,MAAOM,EAAOwB,YAAY9B,MAC1ByE,SAAU,SAAAC,GAAC,OAAI3B,EAAa2B,EAAG,gBAC/BC,MAAOrE,EAAOwB,YAAYzB,WAC1B4D,MAAM,cACNW,QAAQ,WACRC,OAAO,QACPX,KAAK,QACLX,WAAS,EACTuB,WAAS,EACTC,KAAM,IAER,cAACR,EAAA,EAAD,CACEzF,KAAK,OACLkB,MAAOM,EAAOyB,WAAW/B,MACzByE,SAAU,SAAAC,GAAC,OAAI3B,EAAa2B,EAAG,eAC/BC,MAAOrE,EAAOyB,WAAW1B,WACzB4D,MAAM,aACNW,QAAQ,WACRC,OAAO,QACPX,KAAK,QACLX,WAAS,EACTuB,WAAS,EACTC,KAAM,IAER,eAACpB,EAAA,EAAD,CAAKC,GAAI,CAAEoB,UAAW,GAAtB,UACE,cAACC,EAAA,EAAD,CACErB,GAAI,CACFC,QAAS,eACTG,YAAa,GAHjB,uBAKA,cAACkB,EAAA,EAAD,CAAaN,QAAQ,WAArB,SACG1E,EAAaK,KAAI,SAACqC,EAAUJ,GAAX,OAChB,cAAC2C,EAAA,EAAD,CAEEf,QAAS,kBAAMxC,EAAoBgB,EAAS5C,QAC5C4E,QAAShC,EAAS5C,QAAU2B,EAAmB,YAAc,WAC7DxB,MAAOyC,EAASzC,MAChBiF,kBAAgB,EALlB,SAMGxC,EAAS5C,OALLwC,cAYf,qCACE,cAACyC,EAAA,EAAD,CAAYL,QAAQ,QAAQS,cAAY,EAAxC,SAA0C/E,EAAOwB,YAAY9B,QAC7D,cAACiF,EAAA,EAAD,CAAYL,QAAQ,QAApB,SAA6BtE,EAAOyB,WAAW/B,aAInD,eAACsF,EAAA,EAAD,WACE,cAACH,EAAA,EAAD,CACEf,QAASvB,EACT+B,QAAQ,WAFV,SAGqC,SAAlC5G,EAAMkE,QAAQzE,WAAW0E,KAAkB,QAAU,WAErB,SAAlCnE,EAAMkE,QAAQzE,WAAW0E,MACxB,cAACgD,EAAA,EAAD,CACEf,QApLG,WACRhE,EAAUC,WAAWC,GACc,QAAlCtC,EAAMkE,QAAQzE,WAAW0E,KAAiBgB,IAAQE,IAGlDrB,EAAU5B,EAAUQ,iBAAiBN,KAgLjCsE,QAAQ,YACRQ,kBAAgB,EAHlB,SAIGpH,EAAMkE,QAAQzE,WAAW0E,c,6CC9NvBoD,EAzFV,SAAC,GAGC,IAFH5C,EAEE,EAFFA,KAEE,IADF6C,qBACE,WAC0B/D,qBAAW9B,EAAQ9B,SAAvCG,EADN,EACMA,MAAO+B,EADb,EACaA,SAET0F,EAAW,SAACtD,GACdxC,EAAQM,OAAO,MAAOF,EAAU,UAAW,CACvCtC,WAAY,CACRC,MAAM,EACNyE,KAAMA,EACNO,GAAIC,EAAKD,OAgBfgD,EAAkB,WACpB,OACI,cAACC,EAAA,EAAD,CACIC,QACI,eAACjC,EAAA,EAAD,CACIC,GAAI,CACAC,QAAS,OACTC,eAAgB,iBAHxB,UAMKnB,EAAKd,MACN,gCACI,cAACkC,EAAA,EAAD,CACIH,GAAI,CAAEI,YAAa,GACnBC,MAAOtB,EAAKC,SACZzC,MAAOT,EAAeiD,EAAKC,UAC3BsB,KAAK,WAEPsB,GACE,qCACI,cAACrB,EAAA,EAAD,CACID,KAAK,QACL/D,MAAM,UACNiE,QAAS,SAACpB,GACNA,EAAM6C,kBAnCvB,WACnB,IAAMvD,EAAQtE,EAAMuE,KAAK3E,MACnB4E,EAAQF,EAAMG,WAAU,SAAAjC,GAAC,OAAGA,EAAEkC,KAAOC,EAAKD,MAChDJ,EAAME,GAAN,2BACOF,EAAME,IADb,IAEIY,UAAU,IAGdzD,EAAQM,OAAO,MAAOF,EAAU,OAAQ,CAAEnC,MAAO0E,IA4BbwD,IALR,SAOC,cAAC,IAAD,MACD,cAAC3B,EAAA,EAAD,CACID,KAAK,QACL/D,MAAM,UACNiE,QAAS,SAACpB,GACNA,EAAM6C,kBACNJ,EAAS,SALjB,SAOC,cAAC,IAAD,eAMrBM,UAAWpD,EAAKb,eAK5B,OACI,qCACI,cAACkE,EAAA,EAAD,CAAUC,gBAAc,EAAxB,SACKT,EACGE,IAEA,cAACQ,EAAA,EAAD,CAAgBC,SAAO,EAAC/B,QAAS,kBAAMqB,EAAS,SAAhD,SACKC,QAIZF,GAAiB,cAACY,EAAA,EAAD,CAASC,UAAU,WCpFpCC,EAA6B,WAAO,IAAD,EAClB7E,qBAAW9B,EAAQ9B,SAAvCG,EADsC,EACtCA,MAAO+B,EAD+B,EAC/BA,SAET8C,EAAc,WAClBlD,EAAQM,OAAO,MAAOF,EAAU,UAAW,CACvCpC,wBAAwB,KAI9B,OACE,eAAC2F,EAAA,EAAD,CACEC,WAAW,EACXC,KAAMxF,EAAMkE,QAAQvE,uBACpB8F,QAASZ,EAHX,UAIE,cAACa,EAAA,EAAD,yBACA,cAACY,EAAA,EAAD,UACE,cAACiC,EAAA,EAAD,CAAM3C,GAAI,CAAE4C,MAAO,OAAQC,QAAS,oBAApC,SACKzI,EAAMuE,KAAK3E,MAAM6C,QAAO,SAAAD,GAAC,OAAkB,IAAfA,EAAE4C,YAAmB7C,KAAI,SAACoC,EAAMH,GAAP,OAAiB,cAAC,EAAD,CAA0BG,KAAMA,EAAM6C,eAAa,GAAhChD,UAGhG,cAAC8C,EAAA,EAAD,UACE,cAACH,EAAA,EAAD,CAAQf,QAASvB,EAAa+B,QAAQ,WAAtC,yB,4CCkEO8B,EA1FM,WAAO,IAAD,EACKjF,qBAAW9B,EAAQ9B,SAAvCG,EADe,EACfA,MAAO+B,EADQ,EACRA,SACT4G,EAAsC,IAA5B3I,EAAMuE,KAAK3E,MAAMoD,OAC3B4F,EAAmB5I,EAAMuE,KAAK3E,MAAM6E,WAAU,SAAAjC,GAAC,OAAkB,IAAfA,EAAE4C,aAAuB,EAC3EyD,EAAkB7I,EAAMuE,KAAK3E,MAAM6E,WAAU,SAAAjC,GAAC,OAAkB,IAAfA,EAAE4C,aAAsB,EAEzE0D,EAAgB,WAClBnH,EAAQM,OAAO,MAAOF,EAAU,UAAW,CACvCtC,WAAY,CACRC,MAAM,EACNyE,KAAM,UAKlB,OACA,qCACI,eAACwB,EAAA,EAAD,CACIC,GAAI,CACAmD,SAAU,WACVP,MAAO,OACPQ,SAAU,IACVC,OAAQ,OACRpC,OAAQ,QANhB,UASI,eAACqC,EAAA,EAAD,CAAStD,GAAI,CAAEmD,SAAU,YAAzB,UACI,cAAC9B,EAAA,EAAD,CACIrB,GAAI,CACAuD,SAAU,EACVC,UAAU,GAAD,OAAMT,EAAmB,SAAT,SAE7B/B,QAAQ,KACRyB,UAAU,MANd,0BAOEM,GACF,cAACxB,EAAA,EAAD,CACIkC,UAAWR,EACXzC,QAAS,WACLzE,EAAQM,OAAO,MAAOF,EAAU,UAAW,CACvCpC,wBAAwB,KAGhCwC,MAAM,UACNyE,QAAQ,WACRQ,kBAAgB,EATpB,gCAWJ,cAACzB,EAAA,EAAD,CAAKC,GAAI,CAAEwD,UAAW,SAAUE,SAAU,GAA1C,SACMX,EAcE,cAACxB,EAAA,EAAD,CACIf,QAAS0C,EACTlD,GAAI,CACAoB,UAAW,GAEf7E,MAAM,UACNyE,QAAQ,WACRQ,kBAAgB,EAPpB,uCAbHwB,EACG,cAACL,EAAA,EAAD,CAAM3C,GAAI,CACN4C,MAAO,OACPC,QAAS,mBACTQ,OAAQ,OACRM,UAAW,QAJf,SAMKvJ,EAAMuE,KAAK3E,MAAM6C,QAAO,SAAAD,GAAC,OAAkB,IAAfA,EAAE4C,YAAoB7C,KAAI,SAACoC,EAAMH,GAAP,OAAiB,cAAC,EAAD,CAA0BG,KAAMA,GAAbH,QAG/F,cAACgF,EAAA,EAAD,CAAOC,MAAM,EAAOC,SAAS,OAA7B,6CAaNf,GACF,cAACgB,EAAA,EAAD,CACIvD,QAAS0C,EACTlD,GAAI,CACAmD,SAAU,WACVa,OAAQ,GACRC,MAAO,IAEX1H,MAAM,UACN2H,aAAW,MARf,SASI,cAAC,IAAD,SAGR,cAAC,EAAD,IACA,cAAC,EAAD,QCpFOC,MANf,WACE,OACE,cAAC,EAAD,KCAJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACvI,EAAQC,SAAT,UACE,cAAC,EAAD,QAGNuI,SAASC,eAAe,W","file":"static/js/main.6a604493.chunk.js","sourcesContent":["import { ModelConfig } from '../type';\nimport { GeneralModelInitial, IGeneralModel } from './models/general.model';\nimport { ITaskModel, TaskModelInitial } from './models/task.model';\n\n/**\n * append a property for each model and assigned to the model interface\n * \n * model: I***Model;\n * \n */\nexport interface IModels {\n  general: IGeneralModel;\n  task: ITaskModel;\n}\n\n/**\n * append a model name\n */\nexport const modelNameKeys:(keyof IModels)[] = [\n  'general',\n  'task'\n];\n\n/**\n * specify model config\n * \n * 'model': {\n *  storage: false,\n *  model: ***ModelInitial\n * }\n */\nexport const Models: ModelConfig = {\n  'general': {\n    storage: false,\n    modelInitial: GeneralModelInitial\n  },\n  'task': {\n    storage: false,\n    modelInitial: TaskModelInitial\n  }\n};\n","/**\n * define model interface `I***Model`\n */\nexport interface IGeneralModel {\n  taskDialog: {\n    show: boolean;\n    mood?: 'add' | 'edit' | 'view';\n    id?: string;\n  };\n  completeTaskListDialog: boolean;\n}\n\n/**\n * define a model initial object `***ModelInitial`\n */\nexport const GeneralModelInitial: IGeneralModel = {\n  taskDialog: {\n    show: false\n  },\n  completeTaskListDialog: false\n}\n","/**\n * define model interface `I***Model`\n */\n export interface ITaskModel {\n     items: Array<ITask>;\n}\n\nexport interface ITask {\n  id: string;\n  title: string;\n  description: string;\n  indicators: string; //KPI\n  priority: 'low' | 'medium' | 'high';\n  complete: boolean;\n}\n  \n  /**\n   * define a model initial object `***ModelInitial`\n   */\n  export const TaskModelInitial: ITaskModel = {\n    items: []\n  }\n  ","import { createContext, useReducer } from 'react';\nimport { Models, modelNameKeys } from './data-model';\nimport { IContext, Method, ModelName } from './type';\n\nconst Context = createContext<IContext>({} as IContext);\n\nconst initialState = () => {\n  const state: any = {};\n  modelNameKeys.forEach(model => {\n    state[model] = getModelData(model);\n  });\n\n  return state;\n}\n\nfunction getModelData(model: ModelName){\n  const modelConfig = Models[model];\n  if(!modelConfig.storage)\n    return modelConfig.modelInitial;\n\n  const storageData = typeof window !== 'undefined' ? localStorage.getItem(model) : null;\n  return (storageData !== null && storageData !==  undefined) ? JSON.parse(storageData) : modelConfig.modelInitial;\n}\n\nfunction Reducer(state: any, action: any) {\n  const [method, model] = action.type.toString().split('_');\n  return (method === 'SET' || method === 'RESET') ? getNewState(method, model, action, state) : state;\n}\n\nfunction getNewState(method: Method, model: ModelName, action: any, state: any){\n  const modelConfig = Models[model];\n  const modelBody: any = (method === 'RESET') ? modelConfig.modelInitial : {};\n  if(method === 'SET'){\n      Object.keys(modelConfig.modelInitial).forEach(field => {\n          modelBody[field] = (action.payload[field] === undefined ? state[model][field] : action.payload[field]);\n      });\n  }\n\n  if(modelConfig.storage) { localStorage.setItem(model, JSON.stringify(modelBody)) }\n\n  return {\n      ...state,\n      [model]: modelBody\n  };\n}\n\nconst Provider = ({ children }: any) => {\n  const [state, dispatch] = useReducer(Reducer, initialState());\n\n  return (\n    <Context.Provider value={{ state, dispatch }}>{children}</Context.Provider>\n  );\n};\n\n/**\n * `action` has two methods (`'SET'`, `'RESET'`)\n * \n *  `dispatch`, `model` has required in both methods\n * \n *  a `payload` is an object of property or properties needed to change, only required in the `SET method`\n */\nfunction Action(\n  method: Method,\n  dispatch: React.Dispatch<any>,\n  model: ModelName,\n  payload?: any,\n) { \n  return dispatch({\n      type: `${method}_${model}`,\n      payload: method === 'SET' ? payload : Models[model].modelInitial\n  });\n}\n\nexport const Storage = { Provider, Context, Action };\n","export type Priorities = 'low' | 'medium' | 'high';\nexport const priorityList: {\n  value: Priorities;\n  color: 'success' | 'warning' | 'error';\n}[] = [\n  {\n    value: 'low',\n    color: 'success'\n  },\n  {\n    value: 'medium',\n    color: 'warning'\n  },\n  {\n    value: 'high',\n    color: 'error'\n  },\n];\n\nexport enum PriorityColors {\n    'low' = 'success',\n    'medium' = 'warning',\n    'high' = 'error'\n}\n","import { IField } from \"./type\";\n\nfunction validation(fields: IField) { \n    return Object.keys(fields).map(x=> fields[x]).filter(x=> x.required === true).map(x=> x.value !== '').includes(false) ? false : true;\n }\n\nfunction fieldsValidation(fields: IField) {\n    let checkedField: IField | {} = {};\n    Object.keys(fields).forEach(el => {\n        const val = {\n            ...fields[el],\n            value: fields[el].value, \n            validation: (\n                (fields[el].value ? \n                typeof(fields[el].value) === 'object' ? fields[el].value.length === 0 : fields[el].value === ''\n                : true)\n                &&  fields[el].required === true),\n            required: fields[el].required\n        };\n        Object.assign(checkedField, {[el]: val});\n    });\n    return(checkedField!);\n}\n\nfunction uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r && 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\nexport const Utilities = {\n    validation,\n    fieldsValidation,\n    uuidv4\n}\n","import { FC, useContext, useEffect, useState } from 'react';\nimport { Storage } from '../../storage';\nimport { \n  Box,\n  ButtonGroup,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  Typography,\n  Chip,\n  IconButton\n} from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport TaskAltIcon from '@mui/icons-material/TaskAlt';\nimport { Priorities, PriorityColors, priorityList } from './shared';\nimport { Utilities } from '../../shared/utilities';\nimport { IField } from '../../shared/type';\n\nexport const TaskDialog: FC = () => {\n  const { state, dispatch } = useContext(Storage.Context);\n  const [selectedPriority, setSelectedPriority] = useState<Priorities>('low');\n  const [fields, setFields] = useState<IField>({\n    title: {\n      type: 'text',\n      value: '',\n      validation: false,\n      required: true\n    },\n    description: {\n      type: 'text',\n      value: '',\n      validation: false,\n      required: true\n    },\n    indicators: {\n      type: 'text',\n      value: '',\n      validation: false,\n      required: false\n    }\n  });\n\n  const title = () => {\n    switch (state.general.taskDialog.mood) {\n      case 'add':\n        return 'Create new task';\n      case 'edit':\n        return 'Edit task';\n      case 'view':\n        return fields.title.value;\n    }\n  }\n\n  useEffect(() => {\n    if(state.general.taskDialog.show) {\n      if(state.general.taskDialog.mood !== 'add') { getData() }\n    }\n    else {\n      clearForm();\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.general.taskDialog.show]);\n\n\n  const getData = () => {\n    const tasks = state.task.items;\n    const index = tasks.findIndex(x=> x.id === state.general.taskDialog.id);\n    if(index > -1){\n        const item = tasks[index];\n        setFields({\n            ...fields,\n            title: {\n                ...fields.title,\n                value: item.title,\n            },\n            description: {\n                ...fields.description,\n                value: item.description,\n            },\n            indicators: {\n                ...fields.indicators,\n                value: item.indicators,\n            }\n        });\n        setSelectedPriority(item.priority);\n    }\n    else{\n        handleClose();\n    }\n  }\n\n  const clearForm = () => {\n    setTimeout(() => {\n      setFields({\n        title: {\n          ...fields.title,\n          value: '',\n          validation: false\n        },\n        description: {\n          ...fields.description,\n          value: '',\n          validation: false\n        },\n        indicators: {\n          ...fields.indicators,\n          value: '',\n          validation: false\n        }\n      });\n      setSelectedPriority('low');\n    }, 100);\n  }\n\n  const handleClose = () => {\n    Storage.Action('SET', dispatch, 'general', { \n      taskDialog: {\n        ...state.general.taskDialog,\n        show: false,\n      }\n     });\n  };\n\n  const handleChange = (event: React.ChangeEvent<any>, field: string) => {\n    const value = fields[field].type === 'text' ? event.target.value : event.target.checked;\n    setFields({\n      ...fields,\n      [field]: {\n        ...fields[field],\n        value: value,\n        validation: false,\n      }\n    });\n  };\n\n  const save = () => { \n    if(Utilities.validation(fields)){\n        state.general.taskDialog.mood === 'add' ? add() : edit()\n    }\n    else{\n        setFields(Utilities.fieldsValidation(fields));\n    } \n  }\n\n  const add = () => {\n    Storage.Action('SET', dispatch, 'task', {\n      items: [\n        ...state.task.items,\n        {\n          id: Utilities.uuidv4(),\n          title: fields.title.value,\n          description: fields.description.value,\n          indicators: fields.indicators.value,\n          priority: selectedPriority,\n          complete: false\n        }\n      ]\n    });\n    handleClose();\n  }\n\n  const edit = () => {\n    const tasks = state.task.items;\n    const index = tasks.findIndex(x=> x.id === state.general.taskDialog.id);\n    tasks[index] = {\n        ...tasks[index],\n        title: fields.title.value,\n        description: fields.description.value,\n        indicators: fields.indicators.value,\n        priority: selectedPriority\n    }\n\n    Storage.Action('SET', dispatch, 'task', { items: tasks });\n    handleClose();\n  }\n\n  const remove = () => {\n    const tasks = state.task.items;\n    const index = tasks.findIndex(x=> x.id === state.general.taskDialog.id);\n    tasks.splice(index, 1);\n\n    Storage.Action('SET', dispatch, 'task', { items: tasks });\n    handleClose();\n  }\n\n  const markAsComplete = () => {\n    const tasks = state.task.items;\n    const index = tasks.findIndex(x=> x.id === state.general.taskDialog.id);\n    tasks[index] = {\n        ...tasks[index],\n        complete: true\n    }\n\n    Storage.Action('SET', dispatch, 'task', { items: tasks });\n    handleClose();\n  }\n\n  return (\n    <Dialog\n      fullWidth={true}\n      open={state.general.taskDialog.show}\n      onClose={handleClose}>\n      <DialogTitle>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n          {title()}\n          {state.general.taskDialog.mood === 'view' &&\n            <div>\n              <Chip\n                sx={{ marginRight: 1 }}\n                label={selectedPriority}\n                color={PriorityColors[selectedPriority]}\n                size=\"small\"\n              />\n              <IconButton\n                size=\"small\"\n                color=\"primary\"\n                onClick={markAsComplete}\n              ><TaskAltIcon /></IconButton>\n              <IconButton\n                size=\"small\"\n                color=\"primary\"\n                onClick={() => {\n                  Storage.Action('SET', dispatch, 'general', {\n                    taskDialog: {\n                      ...state.general.taskDialog,\n                      mood: 'edit'\n                    }\n                  });\n                }}\n              ><EditIcon /></IconButton>\n              <IconButton\n                color=\"error\"\n                size=\"small\"\n                onClick={remove}\n              ><DeleteIcon /></IconButton>\n            </div>\n          }\n        </Box>\n      </DialogTitle>\n      <DialogContent>\n        {state.general.taskDialog.mood !== 'view' ?\n        <>\n          <TextField\n            autoFocus\n            type=\"text\"\n            value={fields.title.value}\n            onChange={e => handleChange(e, 'title')}\n            error={fields.title.validation}\n            label=\"Title\"\n            variant=\"outlined\"\n            margin=\"dense\"\n            size=\"small\"\n            fullWidth\n          />\n          <TextField\n            type=\"text\"\n            value={fields.description.value}\n            onChange={e => handleChange(e, 'description')}\n            error={fields.description.validation}\n            label=\"Description\"\n            variant=\"outlined\"\n            margin=\"dense\"\n            size=\"small\"\n            fullWidth\n            multiline\n            rows={3}\n          />\n          <TextField\n            type=\"text\"\n            value={fields.indicators.value}\n            onChange={e => handleChange(e, 'indicators')}\n            error={fields.indicators.validation}\n            label=\"Indicators\"\n            variant=\"outlined\"\n            margin=\"dense\"\n            size=\"small\"\n            fullWidth\n            multiline\n            rows={2}\n          />\n          <Box sx={{ marginTop: 1 }}>\n            <Typography\n              sx={{\n                display: 'inline-block',\n                marginRight: 1\n              }}>Priority:</Typography>\n            <ButtonGroup variant=\"outlined\">\n              {priorityList.map((priority, index) =>\n                <Button\n                  key={index}\n                  onClick={() => setSelectedPriority(priority.value)}\n                  variant={priority.value === selectedPriority ? 'contained' : 'outlined'}\n                  color={priority.color}\n                  disableElevation>\n                  {priority.value}\n                </Button>\n              )}\n            </ButtonGroup>\n          </Box>\n        </>\n        :\n        <>\n          <Typography variant=\"body1\" gutterBottom>{fields.description.value}</Typography>\n          <Typography variant=\"body2\">{fields.indicators.value}</Typography>\n        </>\n        }\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={handleClose}\n          variant=\"outlined\">\n          {state.general.taskDialog.mood === 'view' ? 'Close' : 'Cancel'}\n        </Button>\n        {state.general.taskDialog.mood !== 'view' &&\n          <Button\n            onClick={save}\n            variant=\"contained\"\n            disableElevation>\n            {state.general.taskDialog.mood}\n          </Button>\n        }\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { FC, useContext } from 'react';\nimport { Storage } from '../../storage';\nimport { ITask } from '../../storage/data-model/models/task.model';\nimport { PriorityColors } from './shared';\nimport { Box, Chip, Divider, IconButton, ListItem, ListItemButton, ListItemText } from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport TaskAltIcon from '@mui/icons-material/TaskAlt';\n\nconst TaskListItem: FC<{\n    item: ITask;\n    disableAction?: boolean;\n}> = ({\n    item,\n    disableAction = false\n}) => {\n    const { state, dispatch } = useContext(Storage.Context);\n\n    const openTask = (mood: 'edit' | 'view') => {\n        Storage.Action('SET', dispatch, 'general', {\n            taskDialog: {\n                show: true,\n                mood: mood,\n                id: item.id\n            }\n        });\n    }\n\n    const markAsComplete = () => {\n        const tasks = state.task.items;\n        const index = tasks.findIndex(x=> x.id === item.id);\n        tasks[index] = {\n            ...tasks[index],\n            complete: true\n        }\n    \n        Storage.Action('SET', dispatch, 'task', { items: tasks });\n    }\n\n    const listItemContent = () => {\n        return (\n            <ListItemText\n                primary={\n                    <Box\n                        sx={{\n                            display: 'flex',\n                            justifyContent: 'space-between'\n                        }}\n                    >\n                        {item.title}\n                        <div>\n                            <Chip\n                                sx={{ marginRight: 1 }}\n                                label={item.priority}\n                                color={PriorityColors[item.priority]}\n                                size=\"small\"\n                            />\n                            {!disableAction &&\n                                <>\n                                    <IconButton\n                                        size=\"small\"\n                                        color=\"primary\"\n                                        onClick={(event) => {\n                                            event.stopPropagation();\n                                            markAsComplete();\n                                        }}\n                                    ><TaskAltIcon /></IconButton>\n                                    <IconButton\n                                        size=\"small\"\n                                        color=\"primary\"\n                                        onClick={(event) => {\n                                            event.stopPropagation();\n                                            openTask('edit');\n                                        }}\n                                    ><EditIcon /></IconButton>\n                                </>\n                            }\n                        </div>\n                    </Box>\n                }\n                secondary={item.description}\n            />  \n        )\n    }\n\n    return (\n        <>        \n            <ListItem disablePadding>\n                {disableAction ?\n                    listItemContent()\n                :\n                    <ListItemButton divider onClick={() => openTask('view')}>\n                        {listItemContent()}\n                    </ListItemButton>\n                }\n            </ListItem>\n            {disableAction && <Divider component=\"li\" />}\n        </>\n    )\n}\n\nexport default TaskListItem;\n","import { FC, useContext } from 'react';\nimport { Storage } from '../../storage';\nimport { \n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  List} from '@mui/material';\nimport TaskListItem from './task-list-item';\n\nexport const CompleteTaskListDialog: FC = () => {\n  const { state, dispatch } = useContext(Storage.Context);\n\n  const handleClose = () => {\n    Storage.Action('SET', dispatch, 'general', {\n        completeTaskListDialog: false\n     });\n  };\n\n  return (\n    <Dialog\n      fullWidth={true}\n      open={state.general.completeTaskListDialog}\n      onClose={handleClose}>\n      <DialogTitle>Done Tasks</DialogTitle>\n      <DialogContent>\n        <List sx={{ width: '100%', bgcolor: 'background.paper' }}>\n            {state.task.items.filter(x=> x.complete === true).map((item, index) => <TaskListItem key={index} item={item} disableAction />)}\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} variant=\"outlined\">Close</Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { FC, useContext } from 'react';\nimport { Storage } from '../../storage';\nimport { TaskDialog } from './task-dialog';\nimport { CompleteTaskListDialog } from './complete-task-list-dialog';\nimport TaskListItem from './task-list-item';\nimport { Alert, Box, Button, Fab, List, Toolbar, Typography } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\n\nconst TaskList: FC = () => {\n    const { state, dispatch } = useContext(Storage.Context);\n    const isEmpty = state.task.items.length === 0;\n    const hasRemainingTask = state.task.items.findIndex(x=> x.complete === false) > -1;\n    const hasCompleteTask = state.task.items.findIndex(x=> x.complete === true) > -1;\n\n    const createNewTask = () => {\n        Storage.Action('SET', dispatch, 'general', {\n            taskDialog: {\n                show: true,\n                mood: 'add'\n            }\n        });\n    }\n  \n    return (\n    <>\n        <Box\n            sx={{ \n                position: 'relative',\n                width: '100%',\n                maxWidth: 800,\n                height: '95vh',\n                margin: 'auto'\n             }}\n        >\n            <Toolbar sx={{ position: 'relative' }}>\n                <Typography\n                    sx={{\n                        flexGrow: 1,\n                        textAlign: `${!isEmpty ? 'left' : 'center'}`\n                    }}\n                    variant=\"h6\"\n                    component=\"div\">Hello World</Typography>\n                {!isEmpty &&\n                <Button\n                    disabled={!hasCompleteTask}\n                    onClick={() => {\n                        Storage.Action('SET', dispatch, 'general', {\n                            completeTaskListDialog: true\n                        });\n                    }}\n                    color=\"primary\"\n                    variant=\"outlined\"\n                    disableElevation>View Done Tasks</Button>}\n            </Toolbar>\n            <Box sx={{ textAlign: 'center', paddingX: 3 }}>\n                {!isEmpty ?\n                (hasRemainingTask ?                \n                    <List sx={{\n                        width: '100%',\n                        bgcolor: 'background.paper',\n                        height: '85vh',\n                        overflowX: 'auto'\n                    }}>\n                        {state.task.items.filter(x=> x.complete === false).map((item, index) => <TaskListItem key={index} item={item} />)}\n                    </List>\n                :\n                    <Alert icon={false} severity=\"info\">well done, you did it great.</Alert>\n                )\n                :\n                    <Button\n                        onClick={createNewTask}\n                        sx={{\n                            marginTop: 6\n                        }}\n                        color=\"primary\"\n                        variant=\"outlined\"\n                        disableElevation>Create Your First Task ;)</Button>\n                }\n            </Box>\n            {!isEmpty &&\n            <Fab\n                onClick={createNewTask}\n                sx={{\n                    position: 'absolute',\n                    bottom: 16,\n                    right: 16,\n                }}\n                color=\"primary\"\n                aria-label=\"add\">\n                <AddIcon />\n            </Fab>}\n        </Box>\n        <TaskDialog />\n        <CompleteTaskListDialog />\n    </>\n    );\n}\n\nexport default TaskList;\n","import React from 'react';\nimport TaskList from './components/tasks/task-list';\n\nfunction App() {\n  return (\n    <TaskList />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Storage } from './storage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Storage.Provider>\n      <App />\n    </Storage.Provider>\n  </React.StrictMode>,\ndocument.getElementById('root'));\n"],"sourceRoot":""}